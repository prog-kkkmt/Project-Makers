/******************************************************************************/
/***          Generated by IBExpert 2011.04.06 23.05.2020 21:55:51          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'C:\Job\П2-16\Компьютеры\Prg\KKKMT.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN T_BOOL AS
INTEGER;

CREATE DOMAIN T_COUNT AS
INTEGER;

CREATE DOMAIN T_DATE AS
DATE;

CREATE DOMAIN T_EQUIPNAME AS
VARCHAR(50);

CREATE DOMAIN T_EQUIPTYPENAME AS
VARCHAR(30);

CREATE DOMAIN T_FIO AS
VARCHAR(50);

CREATE DOMAIN T_FM AS
VARCHAR(30);

CREATE DOMAIN T_ID AS
INTEGER;

CREATE DOMAIN T_IM AS
VARCHAR(30);

CREATE DOMAIN T_NOMER AS
INTEGER;

CREATE DOMAIN T_NOTE AS
VARCHAR(100);

CREATE DOMAIN T_OT AS
VARCHAR(30);

CREATE DOMAIN T_REGN AS
VARCHAR(10);

CREATE DOMAIN T_ROOMNO AS
VARCHAR(10);

CREATE DOMAIN T_ROOMTYPENAME AS
VARCHAR(30);

CREATE DOMAIN T_SERVICENAME AS
VARCHAR(50);

CREATE DOMAIN T_SHORTNOTE AS
VARCHAR(10);

CREATE DOMAIN T_SOFTNAME AS
VARCHAR(50);

CREATE DOMAIN T_YEAR AS
SMALLINT;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_CHANGEPLACE_ID;
SET GENERATOR GEN_CHANGEPLACE_ID TO 6;

CREATE GENERATOR GEN_EQUIPPART_ID;
SET GENERATOR GEN_EQUIPPART_ID TO 5;

CREATE GENERATOR GEN_EQUIPSERVICE_ID;
SET GENERATOR GEN_EQUIPSERVICE_ID TO 1;

CREATE GENERATOR GEN_EQUIPSOFT_ID;
SET GENERATOR GEN_EQUIPSOFT_ID TO 2;

CREATE GENERATOR GEN_EQUIPTYPE_ID;
SET GENERATOR GEN_EQUIPTYPE_ID TO 18;

CREATE GENERATOR GEN_EQUIP_ID;
SET GENERATOR GEN_EQUIP_ID TO 141;

CREATE GENERATOR GEN_ROOM_ID;
SET GENERATOR GEN_ROOM_ID TO 14;

CREATE GENERATOR GEN_SERVICE_ID;
SET GENERATOR GEN_SERVICE_ID TO 5;

CREATE GENERATOR GEN_SOFT_ID;
SET GENERATOR GEN_SOFT_ID TO 5;

CREATE GENERATOR GEN_TEACHER_ID;
SET GENERATOR GEN_TEACHER_ID TO 136;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE CHANGEPLACE_DEL (
    ID INTEGER /* TYPE OF COLUMN CHANGEPLACE.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE CHANGEPLACE_INS (
    EQUIPID INTEGER /* TYPE OF COLUMN CHANGEPLACE.EQUIPID */,
    ROOMID INTEGER /* TYPE OF COLUMN CHANGEPLACE.ROOMID */,
    DAYOF DATE /* TYPE OF COLUMN CHANGEPLACE.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN CHANGEPLACE.NOTE */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN CHANGEPLACE.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CHANGEPLACE_UPD (
    ID INTEGER /* TYPE OF COLUMN CHANGEPLACE.ID */,
    EQUIPID INTEGER /* TYPE OF COLUMN CHANGEPLACE.EQUIPID */,
    ROOMID INTEGER /* TYPE OF COLUMN CHANGEPLACE.ROOMID */,
    DAYOF DATE /* TYPE OF COLUMN CHANGEPLACE.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN CHANGEPLACE.NOTE */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIP_DEL (
    ID INTEGER /* TYPE OF COLUMN EQUIP.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIP_INS (
    EQUIPTYPEID INTEGER /* TYPE OF COLUMN EQUIP.EQUIPTYPEID */,
    REGN VARCHAR(10) /* TYPE OF COLUMN EQUIP.REGN */,
    NAME VARCHAR(50) /* TYPE OF COLUMN EQUIP.NAME */,
    DAYOF DATE /* TYPE OF COLUMN EQUIP.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIP.NOTE */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN EQUIP.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EQUIP_UPD (
    ID INTEGER /* TYPE OF COLUMN EQUIP.ID */,
    EQUIPTYPEID INTEGER /* TYPE OF COLUMN EQUIP.EQUIPTYPEID */,
    REGN VARCHAR(10) /* TYPE OF COLUMN EQUIP.REGN */,
    NAME VARCHAR(50) /* TYPE OF COLUMN EQUIP.NAME */,
    DAYOF DATE /* TYPE OF COLUMN EQUIP.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIP.NOTE */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPPART_DEL (
    ID INTEGER /* TYPE OF COLUMN EQUIPPART.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPPART_INS (
    EQUIPID INTEGER /* TYPE OF COLUMN EQUIPPART.EQUIPID */,
    EQUIPPARTID INTEGER /* TYPE OF COLUMN EQUIPPART.EQUIPPARTID */,
    DAYOF DATE /* TYPE OF COLUMN EQUIPPART.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIPPART.NOTE */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN EQUIPPART.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EQUIPPART_UPD (
    ID INTEGER /* TYPE OF COLUMN EQUIPPART.ID */,
    EQUIPID INTEGER /* TYPE OF COLUMN EQUIPPART.EQUIPID */,
    EQUIPPARTID INTEGER /* TYPE OF COLUMN EQUIPPART.EQUIPPARTID */,
    DAYOF DATE /* TYPE OF COLUMN EQUIPPART.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIPPART.NOTE */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPSERVICE_DEL (
    ID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPSERVICE_INS (
    EQUIPID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.EQUIPID */,
    SERVICEID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.SERVICEID */,
    DAYOF DATE /* TYPE OF COLUMN EQUIPSERVICE.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIPSERVICE.NOTE */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EQUIPSERVICE_UPD (
    ID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.ID */,
    EQUIPID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.EQUIPID */,
    SERVICEID INTEGER /* TYPE OF COLUMN EQUIPSERVICE.SERVICEID */,
    DAYOF DATE /* TYPE OF COLUMN EQUIPSERVICE.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIPSERVICE.NOTE */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPSOFT_DEL (
    ID INTEGER /* TYPE OF COLUMN EQUIPSOFT.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPSOFT_INS (
    EQUIPID INTEGER /* TYPE OF COLUMN EQUIPSOFT.EQUIPID */,
    SOFTID INTEGER /* TYPE OF COLUMN EQUIPSOFT.SOFTID */,
    DAYOF DATE /* TYPE OF COLUMN EQUIPSOFT.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIPSOFT.NOTE */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN EQUIPSOFT.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EQUIPSOFT_UPD (
    ID INTEGER /* TYPE OF COLUMN EQUIPSOFT.ID */,
    EQUIPID INTEGER /* TYPE OF COLUMN EQUIPSOFT.EQUIPID */,
    SOFTID INTEGER /* TYPE OF COLUMN EQUIPSOFT.SOFTID */,
    DAYOF DATE /* TYPE OF COLUMN EQUIPSOFT.DAYOF */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN EQUIPSOFT.NOTE */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPTYPE_DEL (
    ID INTEGER /* TYPE OF COLUMN EQUIPTYPE.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPTYPE_INS (
    NAME VARCHAR(30) /* TYPE OF COLUMN EQUIPTYPE.NAME */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN EQUIPTYPE.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE EQUIPTYPE_IU (
    ID INTEGER /* TYPE OF COLUMN EQUIPTYPE.ID */,
    NAME VARCHAR(30) /* TYPE OF COLUMN EQUIPTYPE.NAME */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE EQUIPTYPE_UPD (
    ID INTEGER /* TYPE OF COLUMN EQUIPTYPE.ID */,
    NAME VARCHAR(30) /* TYPE OF COLUMN EQUIPTYPE.NAME */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE LAST_PLACE (
    ROOMID T_ID)
RETURNS (
    EQUIPID T_ID,
    EQUIPNAME VARCHAR(50) /* TYPE OF COLUMN EQUIP.NAME */,
    EQUIPTYPENAME VARCHAR(30) /* TYPE OF COLUMN EQUIPTYPE.NAME */,
    REGN VARCHAR(10) /* TYPE OF COLUMN EQUIP.REGN */,
    NOTE T_NOTE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ROOM_DEL (
    ID INTEGER /* TYPE OF COLUMN ROOM.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ROOM_INS (
    ROOMNO VARCHAR(10) /* TYPE OF COLUMN ROOM.ROOMNO */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN ROOM.NOTE */,
    ROOMTYPEID INTEGER /* TYPE OF COLUMN ROOM.ROOMTYPEID */,
    TEACHERID INTEGER /* TYPE OF COLUMN ROOM.TEACHERID */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROOM.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ROOM_SEL1
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROOM.ID */,
    ROOMNO VARCHAR(10) /* TYPE OF COLUMN ROOM.ROOMNO */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN ROOM.NOTE */,
    ROOMTYPEID INTEGER /* TYPE OF COLUMN ROOM.ROOMTYPEID */,
    TEACHERID INTEGER /* TYPE OF COLUMN ROOM.TEACHERID */,
    ROOMTYPENAME VARCHAR(30) /* TYPE OF COLUMN ROOMTYPE.NAME */,
    FIO T_FIO)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ROOM_UPD (
    ID INTEGER /* TYPE OF COLUMN ROOM.ID */,
    ROOMNO VARCHAR(10) /* TYPE OF COLUMN ROOM.ROOMNO */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN ROOM.NOTE */,
    ROOMTYPEID INTEGER /* TYPE OF COLUMN ROOM.ROOMTYPEID */,
    TEACHERID INTEGER /* TYPE OF COLUMN ROOM.TEACHERID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ROOMTYPE_DEL (
    ID INTEGER /* TYPE OF COLUMN ROOMTYPE.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE ROOMTYPE_INS (
    NAME VARCHAR(30) /* TYPE OF COLUMN ROOMTYPE.NAME */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN ROOMTYPE.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE ROOMTYPE_UPD (
    ID INTEGER /* TYPE OF COLUMN ROOMTYPE.ID */,
    NAME VARCHAR(30) /* TYPE OF COLUMN ROOMTYPE.NAME */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SERVICE_DEL (
    ID INTEGER /* TYPE OF COLUMN SERVICE.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SERVICE_INS (
    NAME VARCHAR(50) /* TYPE OF COLUMN SERVICE.NAME */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN SERVICE.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SERVICE_UPD (
    ID INTEGER /* TYPE OF COLUMN SERVICE.ID */,
    NAME VARCHAR(50) /* TYPE OF COLUMN SERVICE.NAME */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SOFT_DEL (
    ID INTEGER /* TYPE OF COLUMN SOFT.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SOFT_INS (
    NAME VARCHAR(50) /* TYPE OF COLUMN SOFT.NAME */,
    FREE INTEGER /* TYPE OF COLUMN SOFT.FREE */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN SOFT.NOTE */,
    LICENSES INTEGER /* TYPE OF COLUMN SOFT.LICENSES */,
    LASTDAY DATE /* TYPE OF COLUMN SOFT.LASTDAY */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN SOFT.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SOFT_INSTALLED (
    SOFTID T_ID)
RETURNS (
    CNT T_COUNT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SOFT_UPD (
    ID INTEGER /* TYPE OF COLUMN SOFT.ID */,
    NAME VARCHAR(50) /* TYPE OF COLUMN SOFT.NAME */,
    FREE INTEGER /* TYPE OF COLUMN SOFT.FREE */,
    NOTE VARCHAR(100) /* TYPE OF COLUMN SOFT.NOTE */,
    LICENSES INTEGER /* TYPE OF COLUMN SOFT.LICENSES */,
    LASTDAY DATE /* TYPE OF COLUMN SOFT.LASTDAY */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE TEACHER_DEL (
    ID INTEGER /* TYPE OF COLUMN TEACHER.ID */)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE TEACHER_INS (
    FM VARCHAR(30) /* TYPE OF COLUMN TEACHER.FM */,
    IM VARCHAR(30) /* TYPE OF COLUMN TEACHER.IM */,
    OT VARCHAR(30) /* TYPE OF COLUMN TEACHER.OT */)
RETURNS (
    ID INTEGER /* TYPE OF COLUMN TEACHER.ID */)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE TEACHER_UPD (
    ID INTEGER /* TYPE OF COLUMN TEACHER.ID */,
    FM VARCHAR(30) /* TYPE OF COLUMN TEACHER.FM */,
    IM VARCHAR(30) /* TYPE OF COLUMN TEACHER.IM */,
    OT VARCHAR(30) /* TYPE OF COLUMN TEACHER.OT */)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE CHANGEPLACE (
    ID       T_ID NOT NULL,
    EQUIPID  T_ID,
    ROOMID   T_ID,
    DAYOF    T_DATE,
    NOTE     T_NOTE
);

CREATE TABLE EQUIP (
    ID           T_ID NOT NULL,
    EQUIPTYPEID  T_ID,
    REGN         T_REGN,
    NAME         T_EQUIPNAME,
    DAYOF        T_DATE,
    NOTE         T_NOTE
);

CREATE TABLE EQUIPPART (
    ID           T_ID NOT NULL,
    EQUIPID      T_ID,
    EQUIPPARTID  T_ID,
    DAYOF        T_DATE,
    NOTE         T_NOTE
);

CREATE TABLE EQUIPSERVICE (
    ID         T_ID NOT NULL,
    EQUIPID    T_ID,
    SERVICEID  T_ID,
    DAYOF      T_DATE,
    NOTE       T_NOTE
);

CREATE TABLE EQUIPSOFT (
    ID       T_ID NOT NULL,
    EQUIPID  T_ID,
    SOFTID   T_ID,
    DAYOF    T_DATE,
    NOTE     T_NOTE
);

CREATE TABLE EQUIPTYPE (
    ID    T_ID NOT NULL,
    NAME  T_EQUIPTYPENAME
);

CREATE TABLE ROOM (
    ID          T_ID NOT NULL,
    ROOMNO      T_ROOMNO,
    NOTE        T_NOTE,
    ROOMTYPEID  T_ID,
    TEACHERID   T_ID
);

CREATE TABLE ROOMTYPE (
    ID    T_ID NOT NULL,
    NAME  T_EQUIPTYPENAME
);

CREATE TABLE SERVICE (
    ID    T_ID NOT NULL,
    NAME  T_SERVICENAME
);

CREATE TABLE SOFT (
    ID        T_ID NOT NULL,
    NAME      T_SOFTNAME,
    FREE      T_BOOL,
    NOTE      T_NOTE,
    LICENSES  T_COUNT,
    LASTDAY   T_DATE
);

CREATE TABLE TEACHER (
    ID  T_ID NOT NULL,
    FM  T_FM,
    IM  T_IM,
    OT  T_OT
);



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE CHANGEPLACE ADD CONSTRAINT PK_CHANGEPLACE PRIMARY KEY (ID);
ALTER TABLE EQUIP ADD CONSTRAINT PK_EQUIP PRIMARY KEY (ID);
ALTER TABLE EQUIPPART ADD CONSTRAINT PK_EQUIPPART PRIMARY KEY (ID);
ALTER TABLE EQUIPSERVICE ADD CONSTRAINT PK_EQUIPSERVICE PRIMARY KEY (ID);
ALTER TABLE EQUIPSOFT ADD CONSTRAINT PK_EQUIPSOFT PRIMARY KEY (ID);
ALTER TABLE EQUIPTYPE ADD CONSTRAINT PK_EQUIPTYPE PRIMARY KEY (ID);
ALTER TABLE ROOM ADD CONSTRAINT PK_ROOM PRIMARY KEY (ID);
ALTER TABLE ROOMTYPE ADD CONSTRAINT PK_ROOMTYPE_1 PRIMARY KEY (ID);
ALTER TABLE SERVICE ADD CONSTRAINT PK_SERVICE PRIMARY KEY (ID);
ALTER TABLE SOFT ADD CONSTRAINT PK_SOFT PRIMARY KEY (ID);
ALTER TABLE TEACHER ADD CONSTRAINT PK_TEACHER PRIMARY KEY (ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE CHANGEPLACE ADD CONSTRAINT FK_CHANGEPLACE_1 FOREIGN KEY (EQUIPID) REFERENCES EQUIP (ID);
ALTER TABLE CHANGEPLACE ADD CONSTRAINT FK_CHANGEPLACE_2 FOREIGN KEY (ROOMID) REFERENCES ROOM (ID);
ALTER TABLE EQUIP ADD CONSTRAINT FK_EQUIP_1 FOREIGN KEY (EQUIPTYPEID) REFERENCES EQUIPTYPE (ID);
ALTER TABLE EQUIPPART ADD CONSTRAINT FK_EQUIPPART_1 FOREIGN KEY (EQUIPID) REFERENCES EQUIP (ID);
ALTER TABLE EQUIPPART ADD CONSTRAINT FK_EQUIPPART_2 FOREIGN KEY (EQUIPPARTID) REFERENCES EQUIP (ID);
ALTER TABLE EQUIPSERVICE ADD CONSTRAINT FK_EQUIPSERVICE_1 FOREIGN KEY (EQUIPID) REFERENCES EQUIP (ID);
ALTER TABLE EQUIPSERVICE ADD CONSTRAINT FK_EQUIPSERVICE_2 FOREIGN KEY (SERVICEID) REFERENCES SERVICE (ID);
ALTER TABLE EQUIPSOFT ADD CONSTRAINT FK_EQUIPSOFT_1 FOREIGN KEY (EQUIPID) REFERENCES EQUIP (ID);
ALTER TABLE EQUIPSOFT ADD CONSTRAINT FK_EQUIPSOFT_2 FOREIGN KEY (SOFTID) REFERENCES SOFT (ID);
ALTER TABLE ROOM ADD CONSTRAINT FK_ROOM_1 FOREIGN KEY (ROOMTYPEID) REFERENCES ROOMTYPE (ID);
ALTER TABLE ROOM ADD CONSTRAINT FK_ROOM_2 FOREIGN KEY (TEACHERID) REFERENCES TEACHER (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: CHANGEPLACE_BI */
CREATE TRIGGER CHANGEPLACE_BI FOR CHANGEPLACE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  -- Если новое значение ключевого поля пусто
  if (new.id is null) then
  -- увеличить текущее значение генератора на 1
  -- и присвоить новому значению ключевого поля 
    new.id = gen_id(gen_changeplace_id,1);
end
^

/* Trigger: EQUIPPART_BI */
CREATE TRIGGER EQUIPPART_BI FOR EQUIPPART
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_equippart_id,1);
end
^

/* Trigger: EQUIPSERVICE_BI0 */
CREATE TRIGGER EQUIPSERVICE_BI0 FOR EQUIPSERVICE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_equipservice_id;
end
^

/* Trigger: EQUIPSOFT_BI */
CREATE TRIGGER EQUIPSOFT_BI FOR EQUIPSOFT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_equipSoft_id,1);
end
^

/* Trigger: EQUIPTYPE_BI0 */
CREATE TRIGGER EQUIPTYPE_BI0 FOR EQUIPTYPE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_equiptype_id;
end
^

/* Trigger: EQUIP_BI0 */
CREATE TRIGGER EQUIP_BI0 FOR EQUIP
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_equip_id;
end
^

/* Trigger: ROOMTYPE_BI0 */
CREATE TRIGGER ROOMTYPE_BI0 FOR ROOMTYPE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_equiptype_id;
end
^

/* Trigger: ROOM_BI0 */
CREATE TRIGGER ROOM_BI0 FOR ROOM
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_room_id;
end
^

/* Trigger: SERVICE_BI0 */
CREATE TRIGGER SERVICE_BI0 FOR SERVICE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_Service_id;
end
^

/* Trigger: SOFT_BI0 */
CREATE TRIGGER SOFT_BI0 FOR SOFT
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_Soft_id;
end
^

/* Trigger: TEACHER_BI0 */
CREATE TRIGGER TEACHER_BI0 FOR TEACHER
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if (new.id is null) then
    new.id = next value for gen_teacher_id;
end
^

SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE CHANGEPLACE_DEL (
    ID TYPE OF COLUMN CHANGEPLACE.ID)
AS
begin
  -- Удалить все строки из таблицы
  delete from changeplace -- 
  -- Для которых значение ИД строки равно значению
  -- передаваемого параметра
  where (id = :id);
end^


ALTER PROCEDURE CHANGEPLACE_INS (
    EQUIPID TYPE OF COLUMN CHANGEPLACE.EQUIPID,
    ROOMID TYPE OF COLUMN CHANGEPLACE.ROOMID,
    DAYOF TYPE OF COLUMN CHANGEPLACE.DAYOF,
    NOTE TYPE OF COLUMN CHANGEPLACE.NOTE)
RETURNS (
    ID TYPE OF COLUMN CHANGEPLACE.ID)
AS
begin
  -- Вставить строку
  insert into changeplace (
    equipid,
    roomid,
    dayof,
    note)
  values ( -- со значениями
    :equipid,
    :roomid,
    :dayof,
    :note)
  returning changeplace.id into :id;
  -- и возвратить новое ИД строки
  suspend;
end^


ALTER PROCEDURE CHANGEPLACE_UPD (
    ID TYPE OF COLUMN CHANGEPLACE.ID,
    EQUIPID TYPE OF COLUMN CHANGEPLACE.EQUIPID,
    ROOMID TYPE OF COLUMN CHANGEPLACE.ROOMID,
    DAYOF TYPE OF COLUMN CHANGEPLACE.DAYOF,
    NOTE TYPE OF COLUMN CHANGEPLACE.NOTE)
AS
begin
  update changeplace
  set equipid = :equipid,
      roomid = :roomid,
      dayof = :dayof,
      note = :note
  where (id = :id);
end^


ALTER PROCEDURE EQUIP_DEL (
    ID TYPE OF COLUMN EQUIP.ID)
AS
begin
  delete from equip
  where (id = :id);
end^


ALTER PROCEDURE EQUIP_INS (
    EQUIPTYPEID TYPE OF COLUMN EQUIP.EQUIPTYPEID,
    REGN TYPE OF COLUMN EQUIP.REGN,
    NAME TYPE OF COLUMN EQUIP.NAME,
    DAYOF TYPE OF COLUMN EQUIP.DAYOF,
    NOTE TYPE OF COLUMN EQUIP.NOTE)
RETURNS (
    ID TYPE OF COLUMN EQUIP.ID)
AS
begin
  insert into equip (
    equiptypeid,
    regn,
    name,
    dayof,
    note)
  values (
    :equiptypeid,
    :regn,
    :name,
    :dayof,
    :note)
  returning equip.id into :id;
  suspend;
end^


ALTER PROCEDURE EQUIP_UPD (
    ID TYPE OF COLUMN EQUIP.ID,
    EQUIPTYPEID TYPE OF COLUMN EQUIP.EQUIPTYPEID,
    REGN TYPE OF COLUMN EQUIP.REGN,
    NAME TYPE OF COLUMN EQUIP.NAME,
    DAYOF TYPE OF COLUMN EQUIP.DAYOF,
    NOTE TYPE OF COLUMN EQUIP.NOTE)
AS
begin
  update equip
  set equiptypeid = :equiptypeid,
      regn = :regn,
      name = :name,
      dayof = :dayof,
      note = :note
  where (id = :id);
end^


ALTER PROCEDURE EQUIPPART_DEL (
    ID TYPE OF COLUMN EQUIPPART.ID)
AS
begin
  delete from equippart
  where (id = :id);
end^


ALTER PROCEDURE EQUIPPART_INS (
    EQUIPID TYPE OF COLUMN EQUIPPART.EQUIPID,
    EQUIPPARTID TYPE OF COLUMN EQUIPPART.EQUIPPARTID,
    DAYOF TYPE OF COLUMN EQUIPPART.DAYOF,
    NOTE TYPE OF COLUMN EQUIPPART.NOTE)
RETURNS (
    ID TYPE OF COLUMN EQUIPPART.ID)
AS
begin
  insert into equippart (
    equipid,
    equippartid,
    dayof,
    note)
  values (
    :equipid,
    :equippartid,
    :dayof,
    :note)
  returning equippart.id into :id;
  suspend;
end^


ALTER PROCEDURE EQUIPPART_UPD (
    ID TYPE OF COLUMN EQUIPPART.ID,
    EQUIPID TYPE OF COLUMN EQUIPPART.EQUIPID,
    EQUIPPARTID TYPE OF COLUMN EQUIPPART.EQUIPPARTID,
    DAYOF TYPE OF COLUMN EQUIPPART.DAYOF,
    NOTE TYPE OF COLUMN EQUIPPART.NOTE)
AS
begin
  update equippart
  set equipid = :equipid,
      equippartid = :equippartid,
      dayof = :dayof,
      note = :note
  where (id = :id);
end^


ALTER PROCEDURE EQUIPSERVICE_DEL (
    ID TYPE OF COLUMN EQUIPSERVICE.ID)
AS
begin
  delete from equipservice
  where (id = :id);
end^


ALTER PROCEDURE EQUIPSERVICE_INS (
    EQUIPID TYPE OF COLUMN EQUIPSERVICE.EQUIPID,
    SERVICEID TYPE OF COLUMN EQUIPSERVICE.SERVICEID,
    DAYOF TYPE OF COLUMN EQUIPSERVICE.DAYOF,
    NOTE TYPE OF COLUMN EQUIPSERVICE.NOTE)
RETURNS (
    ID TYPE OF COLUMN EQUIPSERVICE.ID)
AS
begin
  insert into equipService (
    equipid,
    Serviceid,
    dayof,
    note)
  values (
    :equipid,
    :Serviceid,
    :dayof,
    :note)
  returning equipService.id into :id;
  suspend;
end^


ALTER PROCEDURE EQUIPSERVICE_UPD (
    ID TYPE OF COLUMN EQUIPSERVICE.ID,
    EQUIPID TYPE OF COLUMN EQUIPSERVICE.EQUIPID,
    SERVICEID TYPE OF COLUMN EQUIPSERVICE.SERVICEID,
    DAYOF TYPE OF COLUMN EQUIPSERVICE.DAYOF,
    NOTE TYPE OF COLUMN EQUIPSERVICE.NOTE)
AS
begin
  update equipService
  set equipid = :equipid,
      Serviceid = :Serviceid,
      dayof = :dayof,
      note = :note
  where (id = :id);
end^


ALTER PROCEDURE EQUIPSOFT_DEL (
    ID TYPE OF COLUMN EQUIPSOFT.ID)
AS
begin
  delete from equipSoft
  where (id = :id);
end^


ALTER PROCEDURE EQUIPSOFT_INS (
    EQUIPID TYPE OF COLUMN EQUIPSOFT.EQUIPID,
    SOFTID TYPE OF COLUMN EQUIPSOFT.SOFTID,
    DAYOF TYPE OF COLUMN EQUIPSOFT.DAYOF,
    NOTE TYPE OF COLUMN EQUIPSOFT.NOTE)
RETURNS (
    ID TYPE OF COLUMN EQUIPSOFT.ID)
AS
begin
  insert into equipSoft (
    equipid,
    Softid,
    dayof,
    note)
  values (
    :equipid,
    :Softid,
    :dayof,
    :note)
  returning equipSoft.id into :id;
  suspend;
end^


ALTER PROCEDURE EQUIPSOFT_UPD (
    ID TYPE OF COLUMN EQUIPSOFT.ID,
    EQUIPID TYPE OF COLUMN EQUIPSOFT.EQUIPID,
    SOFTID TYPE OF COLUMN EQUIPSOFT.SOFTID,
    DAYOF TYPE OF COLUMN EQUIPSOFT.DAYOF,
    NOTE TYPE OF COLUMN EQUIPSOFT.NOTE)
AS
begin
  update equipSoft
  set equipid = :equipid,
      Softid = :Softid,
      dayof = :dayof,
      note = :note
  where (id = :id);
end^


ALTER PROCEDURE EQUIPTYPE_DEL (
    ID TYPE OF COLUMN EQUIPTYPE.ID)
AS
begin
  delete from equiptype
  where (id = :id);
end^


ALTER PROCEDURE EQUIPTYPE_INS (
    NAME TYPE OF COLUMN EQUIPTYPE.NAME)
RETURNS (
    ID TYPE OF COLUMN EQUIPTYPE.ID)
AS
begin
  insert into equiptype (
    name)
  values (
    :name)
  returning equiptype.id into :id;
  suspend;
end^


ALTER PROCEDURE EQUIPTYPE_IU (
    ID TYPE OF COLUMN EQUIPTYPE.ID,
    NAME TYPE OF COLUMN EQUIPTYPE.NAME)
AS
begin
  if (exists(select id from equiptype where (id = :id))) then
    update equiptype
    set name = :name
    where (id = :id);
  else
    insert into equiptype (
        id,
        name)
    values (
        :id,
        :name);
end^


ALTER PROCEDURE EQUIPTYPE_UPD (
    ID TYPE OF COLUMN EQUIPTYPE.ID,
    NAME TYPE OF COLUMN EQUIPTYPE.NAME)
AS
begin
  update equiptype
  set name = :name
  where (id = :id);
end^


ALTER PROCEDURE LAST_PLACE (
    ROOMID T_ID)
RETURNS (
    EQUIPID T_ID,
    EQUIPNAME TYPE OF COLUMN EQUIP.NAME,
    EQUIPTYPENAME TYPE OF COLUMN EQUIPTYPE.NAME,
    REGN TYPE OF COLUMN EQUIP.REGN,
    NOTE T_NOTE)
AS
declare variable THISROOMID T_ID;
declare variable MAXDAY T_DATE;
begin
  /* Во внешнем запросе вычисляем последние даты 
     по каждой единице оборудования */

  for select cp1.equipid, max(cp1.dayof)
    from changeplace cp1
    group by cp1.equipid
    having max(cp1.dayof) =
    (
    /* в подзапросе выясняем, является ли аудитория,
       в которую было последнее перемещение, "нашей" аудиторией */
      select max(cp2.dayof)
      from changeplace cp2
      where (cp2.roomid = :roomid) and (cp2.equipid = cp1.equipid)
      group by cp2.equipid
    )
    into :equipid, :maxday
  do begin
    select equip.name, et.name, equip.regn, equip.note
    from equip
    left outer join equiptype et on equip.equiptypeid = et.id
    where equip.id = :equipid
    into :equipname, :equiptypename, :regn, :note;
    suspend;
  end
end^


ALTER PROCEDURE ROOM_DEL (
    ID TYPE OF COLUMN ROOM.ID)
AS
begin
  delete from room
  where (id = :id);
end^


ALTER PROCEDURE ROOM_INS (
    ROOMNO TYPE OF COLUMN ROOM.ROOMNO,
    NOTE TYPE OF COLUMN ROOM.NOTE,
    ROOMTYPEID TYPE OF COLUMN ROOM.ROOMTYPEID,
    TEACHERID TYPE OF COLUMN ROOM.TEACHERID)
RETURNS (
    ID TYPE OF COLUMN ROOM.ID)
AS
begin
  insert into room (
    roomno,
    note,
    roomtypeid,
    teacherid)
  values (
    :roomno,
    :note,
    :roomtypeid,
    :teacherid)
  returning room.id into :id;
  suspend;
end^


ALTER PROCEDURE ROOM_SEL1
RETURNS (
    ID TYPE OF COLUMN ROOM.ID,
    ROOMNO TYPE OF COLUMN ROOM.ROOMNO,
    NOTE TYPE OF COLUMN ROOM.NOTE,
    ROOMTYPEID TYPE OF COLUMN ROOM.ROOMTYPEID,
    TEACHERID TYPE OF COLUMN ROOM.TEACHERID,
    ROOMTYPENAME TYPE OF COLUMN ROOMTYPE.NAME,
    FIO T_FIO)
AS
begin
  for select room.id,
             room.roomno,
             room.note,
             room.roomtypeid,
             room.teacherid,
             roomtype.name,
             teacher.fm
               ||' '||coalesce(substring(teacher.im from 1 for 1),' ')||'.'
               ||' '||coalesce(substring(teacher.ot from 1 for 1),' ')||'.'
      from room
      left outer join roomtype on room.roomtypeid = roomtype.id
      left outer join teacher on room.teacherid = teacher.id
      into :id,
           :roomno,
           :note,
           :roomtypeid,
           :teacherid,
           :roomtypename,
           :fio
  do
  begin
    suspend;
  end
end^


ALTER PROCEDURE ROOM_UPD (
    ID TYPE OF COLUMN ROOM.ID,
    ROOMNO TYPE OF COLUMN ROOM.ROOMNO,
    NOTE TYPE OF COLUMN ROOM.NOTE,
    ROOMTYPEID TYPE OF COLUMN ROOM.ROOMTYPEID,
    TEACHERID TYPE OF COLUMN ROOM.TEACHERID)
AS
begin
  update room
  set roomno = :roomno,
      note = :note,
      roomtypeid = :roomtypeid,
      teacherid = :teacherid
  where (id = :id);
end^


ALTER PROCEDURE ROOMTYPE_DEL (
    ID TYPE OF COLUMN ROOMTYPE.ID)
AS
begin
  delete from roomtype
  where (id = :id);
end^


ALTER PROCEDURE ROOMTYPE_INS (
    NAME TYPE OF COLUMN ROOMTYPE.NAME)
RETURNS (
    ID TYPE OF COLUMN ROOMTYPE.ID)
AS
begin
  insert into roomtype (
    name)
  values (
    :name)
  returning roomtype.id into :id;
  suspend;
end^


ALTER PROCEDURE ROOMTYPE_UPD (
    ID TYPE OF COLUMN ROOMTYPE.ID,
    NAME TYPE OF COLUMN ROOMTYPE.NAME)
AS
begin
  update roomtype
  set name = :name
  where (id = :id);
end^


ALTER PROCEDURE SERVICE_DEL (
    ID TYPE OF COLUMN SERVICE.ID)
AS
begin
  delete from Service
  where (id = :id);
end^


ALTER PROCEDURE SERVICE_INS (
    NAME TYPE OF COLUMN SERVICE.NAME)
RETURNS (
    ID TYPE OF COLUMN SERVICE.ID)
AS
begin
  insert into Service (
    name)
  values (
    :name)
  returning Service.id into :id;
  suspend;
end^


ALTER PROCEDURE SERVICE_UPD (
    ID TYPE OF COLUMN SERVICE.ID,
    NAME TYPE OF COLUMN SERVICE.NAME)
AS
begin
  update Service
  set name = :name
  where (id = :id);
end^


ALTER PROCEDURE SOFT_DEL (
    ID TYPE OF COLUMN SOFT.ID)
AS
begin
  delete from soft
  where (id = :id);
end^


ALTER PROCEDURE SOFT_INS (
    NAME TYPE OF COLUMN SOFT.NAME,
    FREE TYPE OF COLUMN SOFT.FREE,
    NOTE TYPE OF COLUMN SOFT.NOTE,
    LICENSES TYPE OF COLUMN SOFT.LICENSES,
    LASTDAY TYPE OF COLUMN SOFT.LASTDAY)
RETURNS (
    ID TYPE OF COLUMN SOFT.ID)
AS
begin
  insert into soft (
    name,
    free,
    note,
    licenses,
    lastday)
  values (
    :name,
    :free,
    :note,
    :licenses,
    :lastday)
  returning soft.id into :id;
  suspend;
end^


ALTER PROCEDURE SOFT_INSTALLED (
    SOFTID T_ID)
RETURNS (
    CNT T_COUNT)
AS
begin
  select count(es.dayof)
  from equipsoft es
  where (es.softid = :softid)
  into :cnt;
  suspend;
end^


ALTER PROCEDURE SOFT_UPD (
    ID TYPE OF COLUMN SOFT.ID,
    NAME TYPE OF COLUMN SOFT.NAME,
    FREE TYPE OF COLUMN SOFT.FREE,
    NOTE TYPE OF COLUMN SOFT.NOTE,
    LICENSES TYPE OF COLUMN SOFT.LICENSES,
    LASTDAY TYPE OF COLUMN SOFT.LASTDAY)
AS
begin
  update soft
  set name = :name,
      free = :free,
      note = :note,
      licenses = :licenses,
      lastday = :lastday
  where (id = :id);
end^


ALTER PROCEDURE TEACHER_DEL (
    ID TYPE OF COLUMN TEACHER.ID)
AS
begin
  delete from teacher
  where (id = :id);
end^


ALTER PROCEDURE TEACHER_INS (
    FM TYPE OF COLUMN TEACHER.FM,
    IM TYPE OF COLUMN TEACHER.IM,
    OT TYPE OF COLUMN TEACHER.OT)
RETURNS (
    ID TYPE OF COLUMN TEACHER.ID)
AS
begin
  insert into teacher (
    fm,
    im,
    ot)
  values (
    :fm,
    :im,
    :ot)
  returning teacher.id into :id;
  suspend;
end^


ALTER PROCEDURE TEACHER_UPD (
    ID TYPE OF COLUMN TEACHER.ID,
    FM TYPE OF COLUMN TEACHER.FM,
    IM TYPE OF COLUMN TEACHER.IM,
    OT TYPE OF COLUMN TEACHER.OT)
AS
begin
  update teacher
  set fm = :fm,
      im = :im,
      ot = :ot
  where (id = :id);
end^



SET TERM ; ^
